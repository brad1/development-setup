% advanced_vim

; Next iteration:
; SELECTME variants:
; * vim -R  # no args, conventient for Ctrl-T
; * Split based on #SPLIT to preserve env vars.

# File Operations - Open a file in Vim
    vim $FP

# File Operations - Open file in read-only mode
    vim -R $FP
# File Operations - Edit a new temporary file
    vim $(mktemp)

# File Operations - Open two files side by side in vertical splits
    vim -O $FP $FP2

# File Operations - Open two files in horizontal splits
    vim -o $FP $FP2

# File Operations - Open two files in separate tab pages
    vim -p $FP $FP2

# File Operations - Compare two files using Vimdiff
    vim -d $FP $FP2

# File Operations - Start Vim without loading any configuration files
    vim -u NONE $FP

# File Operations - Start Vim in nocompatible mode
    vim -N $FP

# File Operations - Start Vim in easy mode
    vim -y $FP

# File Operations - Start Vim in restricted mode
    vim -Z $FP

# Search and Navigation - Open Vim and search for 'pattern'
    vim +/pattern $FP

# Search and Navigation - Perform a global search and replace
    vim +':%s/old/new/g' $FP

# Search and Navigation - Replace whole word 'foo' with 'bar'
    vim +':%s/\<foo\>/bar/g' $FP

# Search and Navigation - Open file with line numbers enabled
    vim +':set number' $FP

# Search and Navigation - Open file with relative line numbers
    vim +':set relativenumber' $FP

# Search and Navigation - Open file with line wrapping enabled
    vim +':set wrap' $FP

# Search and Navigation - Open file with line wrapping disabled
    vim +':set nowrap' $FP

# Multi-file Editing - Open multiple files in separate tabs
    vim -p $FP $FP2 $FP3

# Multi-file Editing - Open multiple files in horizontal splits
    vim -o $FP $FP2 $FP3

# Multi-file Editing - Open multiple files in vertical splits
    vim -O $FP $FP2 $FP3

# Multi-file Editing - Open Vim with a specific session
    vim -S session.vim

# Multi-file Editing - Create a session file for the current session
    vim -c 'mksession! session.vim' $FP

# Customization and Environment - Start Vim with verbose logging level 1
    vim -V1 vim_log.txt $FP

# Customization and Environment - Open Vim with paste mode enabled
    vim -c 'set paste' $FP

# Customization and Environment - Open Vim without auto-indentation
    vim -c 'set noautoindent' $FP

# Customization and Environment - Open Vim with syntax highlighting enabled
    vim -c 'syntax on' $FP

# Customization and Environment - Open Vim with dark background settings
    vim -c 'set background=dark' $FP

# Integration and Automation - Open Vim in Ex mode and execute commands from a file
    vim -e -s $FP < commands.txt

# Integration and Automation - Open Vim without a swap file
    vim -n $FP

# Integration and Automation - Open Vim in binary mode
    vim -b $FP

# Integration and Automation - Open Vim and log all messages to a file
    vim -L $FP

# Integration and Automation - Send a write command to a running Vim server
    vim --servername VIM --remote-send '<C-\><C-N>:w<CR>'

# Session Management - Restore a Vim session from a session file
    vim -S session.vim

# Session Management - Source a session file after opening a file
    vim -c 'source session.vim' $FP

# Session Management - Save the current session to a session file
    vim -c 'mksession! session.vim' $FP

# Session Management - Open Vim with tabs restored from a session
    vim -c 'tabsession' $FP

# Session Management - Open Vim with buffers restored from a session
    vim -c 'buffersession' $FP

# Advanced Editing - Open Vim without creating a swap file, useful for scripting
    vim -n $FP

# Advanced Editing - Open Vim in Modifications disabled mode
    vim -M $FP

# Advanced Editing - Open Vim in compatible mode
    vim -C $FP

# Advanced Editing - Open Vim without connecting to the X server
    vim -X $FP

# Advanced Editing - Open Vim and source a script file for automated commands
    vim -s script.vim $FP

# Performance and Debugging - Start Vim with verbose logging level 9
    vim -V9vim_debug.log $FP

# Performance and Debugging - Start Vim with no configuration and nocompatible mode for debugging
    vim -u NONE -N $FP

# Performance and Debugging - Start Vim in Ex mode with default settings
    vim -e -u DEFAULTS $FP

# Performance and Debugging - Log the startup time of Vim to a file
    vim --startuptime vim_startup.log $FP

# Performance and Debugging - Start Vim with default settings, ignoring any vimrc files
    vim --clean $FP

# Macros and Scripting - Start Vim and execute a macro script
    vim -S macro.vim $FP

# Macros and Scripting - Source and execute macros from a file after opening
    vim -c 'source macros.vim' $FP

# Macros and Scripting - Initialize register 'a' with a macro to insert "Hello"
    vim -c 'let @a="iHello<Esc>"' $FP

# Macros and Scripting - Execute the macro stored in register 'a'
    vim -c 'execute "normal @a"' $FP

# Macros and Scripting - Redirect the entire buffer content to a file
    vim -c 'redir > output.txt | silent! %p | redir END' $FP

# Plugins and Extensions - Start Vim with an additional plugin
    vim --cmd 'set runtimepath+=~/vim-plugins/pluginname' $FP

# Plugins and Extensions - Open Vim and install plugins using a plugin manager
    vim -c 'PluginInstall' $FP

# Plugins and Extensions - Install a specific Coc plugin on startup
    vim -c 'CocInstall coc-json' $FP

# Plugins and Extensions - Install bundles/plugins using a plugin manager
    vim -c 'BundleInstall' $FP

# Plugins and Extensions - Start Vim without loading any plugins
    vim --noplugin $FP

# Filetype and Encoding - Open Vim and set the filetype to Python
    vim -c 'set filetype=python' $FP

# Filetype and Encoding - Open Vim with UTF-8 encoding
    vim -c 'set encoding=utf-8' $FP

# Filetype and Encoding - Open Vim with Latin1 file encoding
    vim -c 'set fileencoding=latin1' $FP

# Filetype and Encoding - Open Vim with JavaScript syntax highlighting
    vim -c 'set syntax=javascript' $FP

# Filetype and Encoding - Open Vim with spell checking enabled
    vim -c 'set spell' $FP

# Temporary and Restricted Modes - Start Vim in restricted mode
    vim -Z $FP

# Temporary and Restricted Modes - Start Vim with a dumb terminal type
    vim -T dumb $FP

# Temporary and Restricted Modes - Start Vim without connecting to the X server
    vim -X $FP

# Temporary and Restricted Modes - Start Vim without using a viminfo file
    vim -i NONE $FP

# Temporary and Restricted Modes - Start Vim without loading any plugins
    vim --noplugin $FP

# Buffer and Window Management - Open Vim in binary mode
    vim -b $FP

# Buffer and Window Management - Close all buffers and open a specific file silently
    vim -c 'silent! %bd | e $FP' $FP

# Buffer and Window Management - Set line numbers in all open windows
    vim -c 'windo set number' $FP

# Buffer and Window Management - Open a new tab with a specific file
    vim -c 'tabnew $FP2' $FP

# Buffer and Window Management - Resize the current window to 80 columns
    vim -c 'vertical resize 80' $FP

# Color Schemes and Themes - Open Vim with the 'desert' color scheme
    vim -c 'colorscheme desert' $FP

# Color Schemes and Themes - Open Vim with a light background setting
    vim -c 'set background=light' $FP

# Color Schemes and Themes - Open Vim with a dark background setting
    vim -c 'set background=dark' $FP

# Color Schemes and Themes - Open Vim with a transparent background
    vim -c 'highlight Normal ctermbg=none' $FP

# Color Schemes and Themes - Enable syntax highlighting
    vim -c 'syntax enable' $FP

