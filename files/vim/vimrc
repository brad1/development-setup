" optional settings:
"
" source /opt/chef/cookbooks/development-setup/files/vim/rc/experimental
" source /opt/chef/cookbooks/development-setup/files/vim/rc/rspec


" move me "

" This might make sense to toggle when enabling line numbers.
" when mouse mode is disabled, you can copy/paste to system keyboard,
" but with line numbers enabled they will be captured too.
function! ToggleMouse()
    " check if mouse is enabled
    if &mouse == 'a'
        " disable mouse
        set mouse=
    else
        " enable mouse everywhere
        set mouse=a
    endif
endfunc
" call ToggleMouse() " does not currently toggle on rc reload

" end move me"



" common abreviations
iabbrev pry    require 'pry'<CR>binding.pry<CR>

"
" Add another source for abbreviations
" ex: :iabbrev obj    var foo = {};<Left><Left>
:iabbrev pry    require 'pry'<CR>binding.pry<CR>
:iabbrev pend   PendingAlertProcessor

execute pathogen#infect()

syntax on

"
" F keys
"

nmap <F2> :bprev<CR>
nmap <F3> :bnext<CR>
nmap <F4> :tabp<CR>
nmap <F5> :tabn<CR>
nmap <F6> :!open -a TextEdit %:p<CR>
nmap <F7> :split /opt/chef/cookbooks/development-setup/files/vim/cheatsheet<CR>
nmap <F8> :jumps<CR>
nmap <F9> :browse old<CR>

"
" leaders
"
nmap <Leader>a :source ~/.vimrc<CR>       " reload vimrc
nmap <leader>s :w!<CR>                    " save
nmap <leader>d Gzz                        " Go to bottom and center the cursoer
"nmap <Leader>f
nmap <Leader>r :reg<CR>                   " registers
nmap <Leader>p :set mouse=a<CR>           " mouse mode
" search
nmap <Leader>f :%s///g<Left><Left><Left>
" !!! find a better way to do this: see iabbrev
" inoremap <Leader>a {"":"","":[]}
" date
inoremap <Leader>d [<C-R>=strftime("%c")<CR>]<CR>
inoremap <Leader>t [<C-R>=strftime("%T")<CR>]
" seperator
inoremap <Leader>f ------------------------------------------------------------------------------<CR>
:nmap <Leader>e :NERDTreeToggle<CR>
:nmap <Leader>w :set wrap!<CR>
:nmap <Leader>q :nohlsearch<CR>
:map <Leader>g :echo expand('%:p')<CR>
:map <Leader>l :ls<CR>

" nmap <Leader>o :set paste!<CR>
" inoremap <Leader>s TODO:
" nmap <leader><F4> :qa!<CR>      " just use :x instead
" :nmap <Leader>l :setlocal number!<CR> " what did this even do?
" nmap <Leader>i :set mouse=i<CR>           " mouse mode in insert, just allow this by default
" dictionary



"
" sets
"
set dictionary+=~/Projects/sandbox/vim_dictionary
set complete+=k
" generated by
" find . -type f | grep -v git | grep -v tmp | grep -v jar | grep -v migrations | grep -v migrate | grep -v README
" str = File.read('/Users/byohe/tmp/files').gsub('/', ' ').gsub('_', ' ').gsub('.', '')
" File.write('/Users/byohe/tmp/files.1', str)
" cat ~/tmp/files.1 | tr '[:space:]' '\n' | sort | uniq > ~/tmp/files.2
" then manually edit

" Paste mode automatically
let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"
inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()
function! XTermPasteBegin()
   set pastetoggle=<Esc>[201~
   set paste
return ""
endfunction

" disable ex mode unless using
nnoremap Q <nop>

"fix ctrlp being stupid
let g:ctrlp_working_path_mode = ''
" set mouse= " disables mouse mode so you copy to system keyboard with a mouse highlight

" annoying in practice, off by default w/ a toggle might be good
" set foldmethod=syntax "syntax|indent|manual|marker

" huh?
"set path=$PWD/** " for gf
"set path=~/Documents/vim/** " for gf

set path=.

:set mouse=i

"indentation
set smartindent
set tabstop=2
set shiftwidth=2
set expandtab
filetype plugin indent on
" Use tables for .sh files
"autocmd FileType * call Tabstyle_auto()
autocmd FileType sh setlocal autoindent noexpandtab tabstop=4 shiftwidth=4

set nowrap

set incsearch
set ignorecase
set smartcase
set hlsearch

" toggle hybrid numbering
set number!
set relativenumber!

" Turn off mouse mode only when numbering is off
if &number
    set mouse=a
else
    set mouse=
endif


" If you don't have this set already, then do so. It makes vim work like
" every other multiple-file editor on the planet. You can have edited buffers
" that aren't visible in a window somewhere.
set hidden

