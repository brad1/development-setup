# online one pager:
https://gitlab.valcom.com/-/snippets/36

# Debugging:
make -d | grep 'Must remake target'

# <attempt to remove unused make targets>
# probably not worth...
# see below

# used targets
make -d | grep 'Considering target file' | awk -F"'" '{print $2}'

# all targets that have recipes?
make -p | grep -E '^[a-zA-Z0-9_-]+:' | awk '{print $1}' | sort | uniq
make -p | grep -E '^[^[:space:]]+:' | awk '{print $1}' | sort | uniq

# ?
echo "Unreachable targets:"    
comm -23 all_targets.txt used_targets.txt

# make targets: ?
rg -l -g '*.mk' -g '*.mf' -g 'Makefile' '^[a-zA-Z0-9_./-]+:'
rg --no-filename -g '*.mk' -g '*.mf' -g 'Makefile' '^[a-zA-Z0-9_./-]+:' | grep -v PHONY | awk '{print $1}' | sort | uniq


# Help excerpt, options I should try using
Usage: make [options] [target] ...
Options:
  -B, --always-make           Unconditionally make all targets.
  -d                          Print lots of debugging information.
  -i, --ignore-errors         Ignore errors from recipes.
  -k, --keep-going            Keep going when some targets can't be made.
  -n, --just-print, --dry-run, --recon
                              Don't actually run any recipe; just print them.
  -o FILE, --old-file=FILE, --assume-old=FILE
                              Consider FILE to be very old and don't remake it.
  -p, --print-data-base       Print make's internal database.
  -t, --touch                 Touch targets instead of remaking them.
  --trace                     Print tracing information.
  -W FILE, --what-if=FILE, --new-file=FILE, --assume-new=FILE
                              Consider FILE to be infinitely new.
  --warn-undefined-variables  Warn when an undefined variable is referenced.


### Target examples:

1. Simple Compilation:
   all: program

   program: program.o
       gcc -o program program.o

   program.o: program.c
       gcc -c program.c

2. Automatic Variables: (target  name is $@)
   program: program.o
       gcc -o $@ $<

3. Pattern Rules:
   %.o: %.c
       gcc -c $< -o $@

4. Phony Target:
   .PHONY: clean
   clean:
       rm -f *.o program

5. Variable Assignment:
   CC=gcc
   CFLAGS=-c

   program.o: program.c
       $(CC) $(CFLAGS) program.c

6. Conditional Execution:
   ifdef DEBUG
   CFLAGS += -g
   else
   CFLAGS += -O2
   endif

   program: program.o
       gcc $(CFLAGS) -o program program.o

7. Automatic Dependency Generation:
   program.o: program.c
       gcc -c program.c -o program.o
       gcc -MM program.c > program.d

   -include program.d

8. Function Use:
   SOURCES := $(wildcard *.c)
   OBJECTS := $(patsubst %.c,%.o,$(SOURCES))

   program: $(OBJECTS)
       gcc -o program $(OBJECTS)

9. Pattern-Specific Variables:
   %.o: %.c
       gcc $(CFLAGS) -c $< -o $@

   debug/%.o: CFLAGS += -g
   debug/%.o: %.c
       gcc $(CFLAGS) -c $< -o $@

10. Recursive Make:
    .PHONY: subdirs
    subdirs:
        $(MAKE) -C subdir

    program: subdirs program.o
        gcc -o program subdir/subdir.a program.o

11. Multi-Directory Projects:
    CC=gcc
    CFLAGS=-Isrc/include
    LDFLAGS=
    SOURCES=$(wildcard src/*.c)
    OBJECTS=$(SOURCES:.c=.o)
    EXECUTABLE=main

    all: $(SOURCES) $(EXECUTABLE)

    $(EXECUTABLE): $(OBJECTS)
        $(CC) $(LDFLAGS) $(OBJECTS) -o $@

    .c.o:
        $(CC) $(CFLAGS) -c $< -o $@

12. Vpath Directive:
    vpath %.c src
    vpath %.h include

    program: program.o
        gcc -o program program.o

    program.o: program.c program.h
        gcc -c program.c

13. Automatic Prerequisites:
    SRC=$(wildcard *.c)
    OBJ=$(SRC:.c=.o)
    DEP=$(SRC:.c=.d)
    -include $(DEP)

    %.o: %.c
        gcc $(CFLAGS) -MMD -c $< -o $@

    clean:
        rm -f $(OBJ) $(DEP)

14. Archiving Static Libraries:
    AR=ar
    ARFLAGS=rcs
    TARGET=libmylib.a
    OBJECTS=module1.o module2.o

    $(TARGET): $(OBJECTS)
        $(AR) $(ARFLAGS) $@ $(OBJECTS)

15. Silent Mode and Echoing:
    .SILENT:
    program: program.o
        echo "Linking..."
        gcc -o program program.o
        echo "Finished building program."

    %.o: %.c
        echo "Compiling $<..."
        gcc -c $< -o $@




### Old
------------------------------------------------------------------------------
context: exporting variables for use in helper scripts

works exactly the same as bash
------------------------------------------------------------------------------
context: set environment variable in makefile

export CAP_EXPORT_CSV_FILEPATH=./cap-export.csv

This can also be done per-target


------------------------------------------------------------------------------
context: stop make from running when run as a privileged user.
polluting a project with root-owned files means unprivileged builds may not work after.
------------------------------------------------------------------------------
.PHONY: guard-root
guard-root:
ifeq ($(shell id -u),0)
    $(error DO NOT run make as root)
endif

.PHONY: update
update: guard-root 64bit
------------------------------------------------------------------------------





### marker files: (one instance of a pattern)

.PHONY: create_app_bin

app_bin.complete: $(wildcard $(FILES)/app*bin)
	@if [ "$(wildcard $(FILES)/app*bin)" = "" ]; then \
		$(MAKE) create_app_bin; \
	elif [ "$(words $(wildcard $(FILES)/app*bin))" -ne 1 ]; then \
		echo "Multiple files matching 'app*bin' found"; \
		exit 1; \
	else \
		touch $@; \
	fi

create_app_bin:
	# Your logic to create app*bin file goes here
	@echo "Creating app*bin file"
	@touch $(FILES)/app_somethingbin
