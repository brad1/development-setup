[table owner can't access tables]
GRANT USAGE ON SCHEMA public TO username;

[echo queries for shortcuts]
psql -Upostgres -c '\dn' -E
# this gives me the real query

[list schema permissions]
\dn+
https://stackoverflow.com/questions/22715053/postgresql-view-schema-privileges

[rundown]
psql db_name db_user                                                     # open psql
select * from pg_catalog.pg_tables where tableowner != 'postgres';       # list custom tables
                                                                         # describe table
select column_name, data_type, character_maximum_length from
  INFORMATION_SCHEMA.COLUMNS where table_name = 'destinations'

[replace]
UPDATE etable SET name = replace(name, 'string', 'newstring')

[dump]
pg_dump -Upostgres vip_db > vip_db.txt

[clear table / delete form table]
psql -Upostgres db -c "delete from tablename;" # remove all rows

[check and update]
[root@localhost ~]# psql -Upostgres db -c "select * from information" | grep log # or...
[root@localhost ~]# psql -Upostgres db -c "select * from information where label like '%log%'"
[root@localhost ~]# psql -Upostgres db -c "update information set value=7 where label='loglevel'"

[induce failure]
\set STOP_ON_ERROR true
ALTER SCHEMA main RENAME TO delete_later;
this line fails the psql command, will have a non-zero exit code


[clean]
SELECT setval('information_id_seq', (SELECT MAX(id) FROM information)+1);

select count(tablename) from pg_catalog.pg_tables;                       # Count all tables
insert into v_roles values (1,'role1',2,2,2,2,2,2,2,2,2,2,2,2)           # Insert row
update information set value = 7 where label='loglevel';                 # edit row

create database mydb         # create database
> \l                         # list databases

Some interesting flags (to see all, use -h):

    -E: will describe the underlaying queries of the \ commands (cool for learning!)
    -l: psql will list all databases and then exit (useful if the user you connect with doesn't has a default database, like at AWS RDS)

Most \d commands support additional param of __schema__.name__ and accept wildcards like *.*

    \q: Quit/Exit
    \c __database__: Connect to a database
    \d __table__: Show table definition including triggers
    \l: List databases
    \dy: List events
    \df: List functions
    \di: List indexes
    \dn: List schemas
    \dt *.*: List tables from all schemas (if *.* is omitted will only show SEARCH_PATH ones)
    \dv: List views
    \df+ __function__ : Show function SQL code.
    \x: Pretty-format query results instead of the not-so-useful ASCII tables
    \copy (SELECT * FROM __table_name__) TO 'file_path_and_name.csv' WITH CSV: Export a table as CSV

User Related:

    \du: List users
    \du __username__: List a username if present.
    create role __test1__: Create a role with an existing username.
    create role __test2__ noinherit login password __passsword__;: Create a role with username and password.
    set role __test__;: Change role for current session to __test__.
    grant __test2__ to __test1__;: Allow __test1__ to set its role as __test2__.

