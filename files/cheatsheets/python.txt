------------------------------------------------------------------------------
# log method we are in:
def autolog(message):
    "Automatically log the current function details."
    import inspect, logging
    # Get the previous frame in the stack, otherwise it would
    # be this function!!!
    func = inspect.currentframe().f_back.f_code
    # Dump the message + the name of this function to the log.
    logging.debug("%s: %s in %s:%i" % (
        message,
        func.co_name,
        func.co_filename,
        func.co_firstlineno
    ))
------------------------------------------------------------------------------
import ipdb; ipdb.set_trace() # standin for binding.pry
------------------------------------------------------------------------------
Example: environment setup with python36 and pip:
sudo yum install -y https://centos7.iuscommunity.org/ius-release.rpm
sudo yum install -y python3 python36-django
curl "https://bootstrap.pypa.io/get-pip.py" -o "get-pip.py"
python3 get-pip.py
pip install psycopg2-binary # or psycopg2, to compile the module locally
------------------------------------------------------------------------------


------------------------------------------------------------------------------
Example: pipenv is like bundler, use to DL dependencies and create a
virtual env
pip install --user pipenv
If you need to update PATH, see: python -m site --user-base
for ex: ~/.local/bin
------------------------------------------------------------------------------

------------------------------------------------------------------------------
Example: pipenv usage
$ cd project_folder
$ pipenv install requests
$ ls Pipfile
  # like Gemfile.lock? ^
Use with:
```python
import requests
response = requests.get('https://httpbin.org/ip')
print('Your IP is {0}'.format(response.json()['origin']))
```
pipenv run python main.py # think `bundle exec`
------------------------------------------------------------------------------

------------------------------------------------------------------------------
Example: virtualenv
$ pip install virtualenv
$ virtualenv --version
$ cd project_folder
$ virtualenv venv
$ "" --no-site-packages # no system packages! virtualenv 1.7 + does this by default
$ ...
$ deactivate # think 'rvm use system'
see also: pip install virtualenvwrapper
------------------------------------------------------------------------------
