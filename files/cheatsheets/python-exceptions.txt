# ----- BASIC EXCEPTION HANDLING -----

# Basic try-except block
try:
    # code that might raise an exception
    pass
except ExceptionType:
    # code to handle exception
    pass

# Catch multiple exceptions
try:
    pass
except (ExceptionType1, ExceptionType2):
    pass

# Catch exception and get the exception object
try:
    pass
except ExceptionType as e:
    print(e)

# A general catch-all for exceptions
try:
    pass
except Exception as e:
    pass

# ----- ELSE AND FINALLY -----

# Using else (runs if no exception occurs)
try:
    pass
except ExceptionType:
    pass
else:
    pass

# Using finally (always runs)
try:
    pass
except ExceptionType:
    pass
finally:
    pass

# ----- RAISING EXCEPTIONS -----

# Manually raise an exception
raise Exception("Error message")

# Raise an exception inside an except block
try:
    pass
except ExceptionType:
    raise

# Raise a new exception from an existing one
try:
    pass
except ExceptionType as e:
    raise NewException("New message") from e

# ----- COMMON BUILT-IN EXCEPTIONS -----

AssertionError, AttributeError, EOFError, FloatingPointError
ImportError, IndexError, KeyError, KeyboardInterrupt
MemoryError, NameError, NotImplementedError, OSError
OverflowError, ReferenceError, RuntimeError, StopIteration
SyntaxError, IndentationError, TabError, SystemError, SystemExit
TypeError, UnboundLocalError, UnicodeError, UnicodeEncodeError
UnicodeDecodeError, UnicodeTranslateError, ValueError, ZeroDivisionError

# ----- CUSTOM EXCEPTIONS -----

# Define a custom exception
class CustomError(Exception):
    pass

# ----- WARNINGS -----

# Using warnings
import warnings

warnings.warn("This is a warning!")

# Filter warnings
warnings.filterwarnings("ignore")
warnings.filterwarnings("error")

# ----- ASSERT STATEMENTS -----

# Basic assert (raises AssertionError if condition is False)
assert condition, "Error message"

# ----- CONTEXT MANAGERS AND EXCEPTIONS -----

# Create a context manager using a class
class ManagedResource:
    def __enter__(self):
        # setup code
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        # cleanup code

# Using a context manager
with ManagedResource() as resource:
    pass

