UTF-8: A Sysadmin's Guide

Overview
UTF-8 (Unicode Transformation Format - 8-bit) is a variable-width character encoding used to represent text in computers, communications, and storage. It's the dominant character encoding for the web and is backward compatible with ASCII.

Key Features
- Variable Width: UTF-8 encodes characters in one to four bytes.
- ASCII Compatibility: The first 128 characters (0-127) in UTF-8 are identical to ASCII.
- Endian-Independent: Byte order doesn't affect UTF-8 encoded data.
- Self-Synchronizing: The start of each character is easily identifiable, aiding in error recovery and string processing.

Encoding Structure
- 1 Byte: `0xxxxxxx` (7 bits for ASCII characters)
- 2 Bytes: `110xxxxx 10xxxxxx` (11 bits for characters in the range U+0080 to U+07FF)
- 3 Bytes: `1110xxxx 10xxxxxx 10xxxxxx` (16 bits for characters in the range U+0800 to U+FFFF)
- 4 Bytes: `11110xxx 10xxxxxx 10xxxxxx 10xxxxxx` (21 bits for characters in the range U+10000 to U+10FFFF)

Common Commands

1. Check File Encoding
"""
file -i filename
"""
Example output: `filename: text/plain; charset=utf-8`

2. Convert File to UTF-8
"""
iconv -f original_encoding -t utf-8 inputfile -o outputfile
"""

3. Display File in Hex
"""
xxd filename
"""

4. Edit File in Hex with Vim
- Open file:
"""
vim filename
"""
- Convert to hex:
"""
:%!xxd
"""
- After editing, convert back:
"""
:%!xxd -r
"""
- Save and exit:
"""
:wq
"""

5. Print the First 2 Bytes of a File
"""
hexdump -n 2 filename
"""

6. Handle Non-UTF-8 Characters in a Script
"""
import chardet

with open('filename', 'rb') as f:
    raw_data = f.read()
    result = chardet.detect(raw_data)
    encoding = result['encoding']

if encoding.lower() != 'utf-8':
    with open('filename', 'r', encoding=encoding) as f:
        data = f.read()
    with open('filename', 'w', encoding='utf-8') as f:
        f.write(data)
"""

Troubleshooting Tips
- Invalid Byte Sequences: Use tools like `iconv` to convert files with invalid sequences to UTF-8.
- Mixed Encodings: Identify and normalize mixed encodings using `chardet`.
- Character Corruption: Ensure consistent encoding/decoding practices in scripts and applications.

Best Practices
- Set Default Encoding: Configure systems and applications to default to UTF-8.
- Validate Encoding: Regularly check and validate file encodings.
- Document Encoding: Clearly document the expected encoding for data interchange formats.

By following these guidelines and utilizing the provided tools and commands, sysadmins can effectively manage and troubleshoot UTF-8 encoded data, ensuring compatibility and preventing character corruption issues.

