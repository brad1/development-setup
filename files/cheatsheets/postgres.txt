-- DATABASE OPERATIONS --
CREATE DATABASE dbname;
DROP DATABASE dbname;

-- USER & PRIVILEGES --
CREATE USER username WITH PASSWORD 'password';
DROP USER username;
GRANT ALL PRIVILEGES ON DATABASE dbname TO username;
REVOKE ALL PRIVILEGES ON DATABASE dbname FROM username;
ALTER USER username WITH PASSWORD 'newpassword';

-- CONNECT TO A DATABASE --
\c dbname

-- TABLE OPERATIONS --
CREATE TABLE tablename (
    column1 datatype1 PRIMARY KEY,
    column2 datatype2,
    ...
);
DROP TABLE tablename;
ALTER TABLE tablename ADD COLUMN columnname datatype;
ALTER TABLE tablename DROP COLUMN columnname;
ALTER TABLE tablename RENAME COLUMN oldname TO newname;
ALTER TABLE tablename RENAME TO newtablename;

-- INDEXES --
CREATE INDEX indexname ON tablename(columnname);
DROP INDEX indexname;

-- INSERTING DATA --
INSERT INTO tablename(column1, column2, ...) VALUES(value1, value2, ...);

-- UPDATING DATA --
UPDATE tablename SET column1 = value1, column2 = value2 WHERE condition;

-- DELETING DATA --
DELETE FROM tablename WHERE condition;

-- QUERYING DATA --
SELECT column1, column2 FROM tablename WHERE condition;
SELECT column1, column2 FROM tablename WHERE condition ORDER BY column1 ASC|DESC;
SELECT column1, column2 FROM tablename WHERE condition LIMIT number;
SELECT COUNT(*) FROM tablename WHERE condition;

-- JOINING TABLES --
SELECT t1.column1, t2.column2 
FROM table1 t1 
JOIN table2 t2 ON t1.common_column = t2.common_column;

-- AGGREGATION FUNCTIONS --
SELECT AVG(columnname) FROM tablename;
SELECT SUM(columnname) FROM tablename;
SELECT MIN(columnname) FROM tablename;
SELECT MAX(columnname) FROM tablename;

-- TRANSACTION CONTROL --
BEGIN;
COMMIT;
ROLLBACK;

-- SEQUENCES --
CREATE SEQUENCE seqname;
DROP SEQUENCE seqname;
SELECT nextval('seqname');

-- BACKUP & RESTORE --
pg_dump dbname -f backup.sql
psql dbname < backup.sql

-- LISTING --
\l          -- List all databases
\dt         -- List all tables in the current database
\dn         -- List all schemas
\du         -- List all users

-- VIEWS --
CREATE VIEW viewname AS SELECT column1, column2 FROM tablename WHERE condition;
DROP VIEW viewname;

-- DATE/TIME FUNCTIONS --
SELECT NOW();
SELECT CURRENT_DATE;
SELECT CURRENT_TIME;
SELECT EXTRACT(MONTH FROM date_column) FROM tablename;

-- STRING FUNCTIONS --
SELECT LENGTH(string_column) FROM tablename;
SELECT LOWER(string_column) FROM tablename;
SELECT UPPER(string_column) FROM tablename;
SELECT CONCAT(string1, string2) FROM tablename;

-- SYSTEM INFO --
SELECT version();

# advanced section


-- ADVANCED TABLE OPERATIONS --
CREATE TEMP TABLE temp_tablename AS SELECT * FROM tablename;
TRUNCATE tablename;  -- Remove all rows from a table

-- CONSTRAINTS --
ALTER TABLE tablename ADD CONSTRAINT constraintname UNIQUE (columnname);
ALTER TABLE tablename ADD CONSTRAINT constraintname FOREIGN KEY (column1) REFERENCES other_table(column2);
ALTER TABLE tablename DROP CONSTRAINT constraintname;

-- PARTITIONING --
CREATE TABLE parent_tablename (column1 datatype1, column2 datatype2) PARTITION BY RANGE (column1);
CREATE TABLE child_tablename PARTITION OF parent_tablename FOR VALUES FROM (start_value) TO (end_value);

-- VACUUM --
VACUUM tablename;  -- Clean up and optimize the table
VACUUM FULL tablename;  -- More aggressive cleanup
ANALYZE tablename;  -- Update statistics

-- LISTEN & NOTIFY --
LISTEN channelname;
NOTIFY channelname, 'message';

-- EXTENSIONS --
CREATE EXTENSION extensionname;
DROP EXTENSION extensionname;

-- FULL TEXT SEARCH --
CREATE TEXT SEARCH DICTIONARY dictionaryname (TEMPLATE = template_name, OPTIONS);
CREATE TEXT SEARCH CONFIGURATION configname (PARSER = parser_name);
ALTER TEXT SEARCH CONFIGURATION configname ADD MAPPING FOR token_type WITH dictionaryname;

-- SHELL ADMIN TASKS --

-- Start PostgreSQL (typically for Linux systems) --
pg_ctl start -D /path/to/data_directory

-- Stop PostgreSQL (typically for Linux systems) --
pg_ctl stop -D /path/to/data_directory

-- Restart PostgreSQL (typically for Linux systems) --
pg_ctl restart -D /path/to/data_directory

-- Reload PostgreSQL without dropping connections (typically for Linux systems) --
pg_ctl reload -D /path/to/data_directory

-- Check PostgreSQL status (typically for Linux systems) --
pg_ctl status -D /path/to/data_directory

-- Starting PostgreSQL in single-user mode --
postgres --single -D /path/to/data_directory dbname

-- Create a new PostgreSQL cluster --
initdb -D /path/to/new_data_directory

-- Check PostgreSQL configuration files (usually located in the data directory) --
postgresql.conf  -- Main configuration file
pg_hba.conf  -- Client authentication configuration
pg_ident.conf  -- User name mapping

-- Replication --
pg_basebackup -h master_host -D /path/to/replica_data_directory -U replication_user -P --wal-method=stream

-- Tablespaces --
CREATE TABLESPACE tablespacename LOCATION '/path/on/filesystem';
DROP TABLESPACE tablespacename;

-- LOG MANAGEMENT --
-- Assuming you're logging to a directory, navigate to that directory and check the log files.
tail -f /path/to/log_directory/logfile

-- CONNECTION & SESSION MANAGEMENT --
SELECT * FROM pg_stat_activity WHERE state = 'active';

-- TERMINATE CONNECTIONS --
SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname = 'dbname';

-- BLOAT CHECK --
SELECT tablename, pg_total_relation_size(tablename::text), pg_total_relation_size(tablename::text) - pg_relation_size(tablename::text) AS overhead
FROM (SELECT ('"' || schemaname || '"."' || tablename || '"')::text AS tablename FROM pg_tables) AS subquery;




