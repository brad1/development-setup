### VAGRANT

# needed this and vagrant pkg update after virtualbox upgrade to 7.1
vagrant plugin expunge [--reinstall]
vagrant plugin repair
vagrant ssh-config > vagrant-ssh # save the config to a file
  * ssh -F vagrant-ssh default       # run ssh with the file.
vagrant ssh
  * sudo -u vagrant bundle install --local


### VAGRANTFILE

# Make rsync space make targets... SO solution doesn't quite work
      rsync__args: ["--filter=:- .gitignore",
        "--verbose", "--rsync-path='sudo rsync'", "--archive", "--delete", "-z"]

### Bundle

bundle config build.do_postgres --with-opt-lib="$PGDIR/lib"
bundle config build.nokogiri --use-system-libraries
bundle config build.pg --with-pg-config="$PGDIR/bin/pg_config"
bundle config build.sequel_pg   --with-pq-lib"=$PGDIR/lib --with-pq-include=$PGDIR/include/"
bundle exec rspec -f p -f h --out $art/rspec.html -f d --out $art/rspec-documentation.log 2>>$art/rspec.err
bundle install --local --path vendor/bundle; # Populate vendor/bundle using vendor/cache as the source
bundle install --system --local --without development test
bundle package --no-install;                 # Populate vendor/cache

### DOCKERFILE

mkdir -p $HOME/.gem $HOME/.bundle && \
mkdir -p /home/gitlab-runner/.bundle && \


#### Rspec

# ordered and raise
expect_any_instance_of(Object).to receive(:select).ordered.and_return([[socket_double]])
expect_any_instance_of(Object).to receive(:select).ordered.and_raise()

# stub/mock global methods
allow_any_instance_of(Object).to receive(:start_in_thread).and_yield

2.2.0 :002 > method(:puts).receiver
 => main

2.2.0 :003 > method(:puts).owner
 => Kernel

# example
describe FirstStart do

  context "#exec" do
    context "when item is" do
      it "returns false" do
      end
    end
  end
end


#### RBENV
    #export PATH=~/.rbenv/shims:$PATH    
    #export PATH=~/.rbenv/bin:$PATH    
  #eval "$(/root/.rbenv/bin/rbenv init - --no-rehash bash)"
  (
    export RBENV_DEBUG=0         
    export HOME=/root         
    $HOME/.rbenv/bin/rbenv init            
    $HOME/.rbenv/bin/rbenv versions            
    $HOME/.rbenv/bin/rbenv global 3.3.6               
  )





##### Searchable dump of ruby.txt
------------------------------------------------------------------------------
context: monkeypatch wrap

class Foo
  old_bar = instance_method(:bar)

  define_method(:bar) do
    old_bar.bind(self).() + ' World'
  end
end

-----------------------------------------------------------------------------
context: ruby inspect method on mangled ROM subclasses

    # TODO: improve "inspect"

    # Special case, keep "inspect" from crashing with:
    # <NoMethodError: undefined method `[]' for nil:NilClass> with backtrace:
    # /share/vipsched/vendor/bundle/ruby/2.7.0/gems/dry-struct-1.4.0/lib/dry/struct.rb:196
    def inspect
      # Object.instance_method(:inspect).bind(self).call # ruby default
      self.instance_variables.map {|e| [e, self.instance_variable_get(e)] }.to_s
    end
------------------------------------------------------------------------------
context:  find project install path from GEM

root_dir = Pathname.new(File.dirname(Gem.bin_path('gemname', 'exename.rb'))).parent
(root_dir + 'lib').to_s
------------------------------------------------------------------------------
context: datamapper

# good luck!
class StnA
    include DataMapper::Resource

    property :id,       Serial, :key => true
    property :datetime, DateTime
    property :stna_kW,  Integer

------------------------------------------------------------------------------
context: global methods



2.2.0 :002 > method(:puts).receiver
 => main

2.2.0 :003 > method(:puts).owner
 => Kernel

------------------------------------------------------------------------------
# auto method/arg log, trace log
def log
  calling_method = caller[0][/`.*'/][1..-2]
  args = method(calling_method).parameters.map { |arg| arg[1].to_s }
  require 'pry'
  binding.pry
  puts "Method #{calling_method} failed with " + args.map { |arg| "#{arg} = #{eval arg}" }.join(', ')
end

# Doesn't quite work b/c:
# and 'eval' doesn't work when the vars are out of scope
#[7] pry(main)> method(calling_method).parameters
#=> [[:opt, :a], [:opt, :b]]
------------------------------------------------------------------------------
"hello".ljust(4)            #=> "hello"
"hello".ljust(20)           #=> "hello               "
"hello".ljust(20, '1234')   #=> "hello123412341234123"

and rjust
------------------------------------------------------------------------------
  text = <<-EOH
    vagrant_http_port=#{http}
    vagrant_https_port=#{https}
    vagrant_ssh_port=#{ssh}
  EOH
------------------------------------------------------------------------------
#Resqueu
#!/usr/bin/ruby
require 'resque'
puts Resque.info
job = Resque.redis.lrange('queue:system', 0, 0).last
h = Resque.decode(job)
puts h
------------------------------------------------------------------------------
require 'erb'

weekday = Time.now.strftime('%A')
simple_template = "Today is <%= weekday %>."

renderer = ERB.new(simple_template)
puts output = renderer.result()
------------------------------------------------------------------------------


if_this_is_a_true_value ? then_the_result_is_this : else_it_is_this

    # rubocop:disable Metrics/MethodLength


def get_request_token
    consumer.get_request_token(oauth_callback: callback_url)
rescue OAuth::Unauthorized => oua
        case oua.request.code.to_s
        when '401'
                throw Exception.new 'check your tokens'
        when '403'
                throw Exception.new 'check your whitelist'
        else
                raise
        end
end

### tracing a stack overflow:
$enable_tracing = false
$trace_out = open('trace.txt', 'w')

set_trace_func proc { |event, file, line, id, binding, classname|
  if $enable_tracing && event == 'call'
    $trace_out.puts "#{file}:#{line} #{classname}##{id}"
  end
}

$enable_tracing = true
###




[gem]
    gem build
    gem cert
    gem check
    gem cleanup
    gem contents
    gem dependency
    gem environment
    gem fetch
    gem generate_index
    gem help
    gem info
    gem install
    gem list
    gem lock
    gem mirror
    gem open
    gem outdated
    gem owner
    gem pristine
    gem push
    gem query
    gem rdoc
    gem search
    gem server
    gem signin
    gem signout
    gem sources
    gem specification
    gem stale
    gem uninstall
    gem unpack
    gem update
    gem which
    gem yank

