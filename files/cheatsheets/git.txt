------------------------------------------------------------------------------
context: scroll through one file's history of commits

fn='web/php/classes/event.php' bash -c "git log --reverse --format='%H' -- \$fn | xargs -n1 -ISUB git show SUB -- \$fn"
------------------------------------------------------------------------------
context: scroll through MR commits

git log master... --oneline | awk '{print $1}' | xargs -n1 git show --name-only
------------------------------------------------------------------------------
context: show full diffs

git <diff|show> -U10000 # max number of lines, pick a large one
------------------------------------------------------------------------------
context: git branch pruning

git remote prune origin prunes tracking branches not on the remote.
git branch --merged lists branches that have been merged into the current branch.
xargs git branch -d deletes branches listed on standard input.

To give yourself the opportunity to edit the list before deleting branches, you could do the following in one line:
git branch --merged >/tmp/merged-branches && \
  vi /tmp/merged-branches && xargs git branch -d </tmp/merged-branches

------------------------------------------------------------------------------
context: partial cherry-pick


git cherry-pick -n <commit>
"no commit", so edit before picking
------------------------------------------------------------------------------

# find checked out branches:
git reflog | grep 'checkout: moving from master' | head -n 20

# git blame, show whole commit matching a pattern
git show $(git blame 06_firmware_upgrade.sh | grep 'see above' | awk '{print $1}')

# split commmit
git rebase -i HEAD~5
> use 'e' for edit
git reset HEAD^
git add [-a -u] # basically add everything back
git reset HEAD <filepath> to unstage
git commit
git add # another file
git commit # second split out commit!
git rebase --continue

# merge conflict
git pull -X theirs
If you're already in conflicted state...
git checkout --theirs path/to/file


# list commit authors and dates, can be useful for pulling only new commits
# out of a branch that was not rebased properly
git log --pretty=format:"%h%x09%an%x09%ad%x09%s"

# delete and recreate remote branch
git branch -D branchname
git checkout --track origin/branchname

# missing/deleted file
git log --full-history  -- myfile

# restore a file
git log file
> abc123 <commit message of undesired change>
git checkout abc123~1 -- file

# update local tags
 git fetch --tags

# Just show commits new in this branch
git log master... --oneline

# git lg -p -- <file>
emulate a 'git show' for a single file

# lightweight tag!
git tag platform-real-ifup-local-done

[search diff history for one file for text!]
git log -S allow_failure .gitlab-ci.yml
Example usage:
git show $(git log -S allow_failure .gitlab-ci.yml | head -n1 | awk '{print $2}')

[show the commit message for a line in a given file]
git show $(git blame ../.gitlab-ci.yml| grep psql | cut -d' ' -f1)

[revert a git stash pop]
https://stackoverflow.com/questions/8515729/aborting-a-stash-pop-in-git
maybe: git merge-recursive stash@{0}: -- $(git write-tree) stash@{0}^1
or:
git reset HEAD --hard
git checkout my_correct_branch
git stash pop

[follow a file]
git blame <filepath>
git log --oneline -- $(find . -name filename)
gitk [--follow] filename

or:
git log --oneline --all --full-history -- \*\*/ruby.\*

git log branchB..branchA

[stash]
git stash [show [-p] |list|drop|pop|save "comment"]
git stash -p # will ask you which files to stash

# wip: find where a commit came from, doesn't really work
git branch -r --contains e087f18e5
# better: find a branch where:
# the head commit's date is within a week after the date of <commit>?
# consider: git log <SHA1>..HEAD --ancestry-path --merges

[find changes to a file since last release/tag]
date=$(git show 6025-v4.10.0 | grep Date | cut -d':' -f2-4)
git blame --since="$date" -- Vagrantfile | grep -v '^\^'

[WIP: for all files]
for file in $(git ls-files); do git blame $file; done
for file in $(git ls-files); do git blame --since="$date" -- $file | grep -v '^/^'; done
# this almost works, but redirect to file doesn't record it.

checkout version of a file
git checkout master -- myplugin.js
