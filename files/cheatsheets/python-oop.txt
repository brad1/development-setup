# ----- BASIC CLASS DEFINITION -----
class ClassName:
    class_attribute = "value"

    def __init__(self, instance_attribute):
        self.instance_attribute = instance_attribute

    def instance_method(self):
        return self.instance_attribute

    @classmethod
    def class_method(cls):
        return cls.class_attribute

    @staticmethod
    def static_method(param):
        return param

# ----- INHERITANCE -----
class DerivedClass(ClassName):
    def __init__(self, instance_attribute, new_attribute):
        super().__init__(instance_attribute)
        self.new_attribute = new_attribute

# ----- ENCAPSULATION -----
# Using single underscore (not enforced, but by convention)
class EncapsulationDemo:
    def __init__(self):
        self.public = "public attribute"
        self._protected = "protected attribute"

# Using double underscores (name mangling to make it less accessible)
    __private = "private attribute"

    def access_private(self):
        return self.__private

# ----- POLYMORPHISM -----
# Using duck typing
def function_to_demo_polymorphism(obj):
    return obj.method()

class A:
    def method(self):
        return "A's method"

class B:
    def method(self):
        return "B's method"

# function_to_demo_polymorphism can take either an object of A or B

# ----- ABSTRACT CLASSES & METHODS -----
from abc import ABC, abstractmethod

class AbstractClass(ABC):

    @abstractmethod
    def abstract_method(self):
        pass

# Derived class must implement the abstract_method

# ----- COMPOSITION -----
class Engine:
    def start(self):
        return "Engine started"

class Car:
    def __init__(self):
        self.engine = Engine()

    def start(self):
        return self.engine.start()

# ----- MAGIC METHODS (dunder methods) -----
class MagicMethodsDemo:
    def __init__(self, data):
        self.data = data

    def __str__(self):
        return f"String representation: {self.data}"

    def __len__(self):
        return len(self.data)

    def __getitem__(self, index):
        return self.data[index]

    def __eq__(self, other):
        return self.data == other.data

# ... and there are many more magic methods!

# ----- PROPERTY DECORATORS -----
class PropertyDemo:
    def __init__(self, value):
        self._attribute = value

    @property
    def attribute(self):
        return self._attribute

    @attribute.setter
    def attribute(self, value):
        if value > 0:
            self._attribute = value
        else:
            raise ValueError("Value should be positive")

    @attribute.deleter
    def attribute(self):
        del self._attribute

# ----- ASSOCIATION, AGGREGATION, COMPOSITION, DEPENDENCY -----
# These are higher-level OOP concepts often shown in UML diagrams and dictate the relationship between classes. 


