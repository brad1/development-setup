# run in foreground
gunicorn your_project_name.wsgi:application -b unix:/path/to/your/socket.sock --access-logfile -
------------------------------------------------------------------------------
context: untested file download

def method
  self.get
------------------------------------------------------------------------------
------------------------------------------------------------------------------
[build and test:]
1.  Install ipdb to server_env
2.  Add code: "import ipdb; ipdb.set_trace()"
3.  Use quick-build.sh or make -C server_api install (does not overwrite ipdb today)
4. run:
context:
  vagrant ssh bootstrap
  sudo su -l
shell:
  systemctl stop django;
    /opt/vmass/server_api/server_env/bin/gunicorn --workers 3 --bind unix:/var/run/api_v1.sock api_v1.wsgi:application --timeout 3600
5. curl -L localhost/api/cap/messages/
   embed test code in that endpoint, today it is at:
     caps/urls.py --> caps/view.py :: CapsListView.list
6. Get a shell, run code!
------------------------------------------------------------------------------
------------------------------------------------------------------------------
[sample code]
# OrderdDicts and tuples from API request
class CapsListView(generics.ListAPIView):
  def list_ids(self, request, *args, **kwargs):
    res = super(generics.ListAPIView, self).list(self, request, args, kwargs)
    item = res.data.popitem()
     for message in item[1]:
       print(message['id'])
------------------------------------------------------------------------------
------------------------------------------------------------------------------

<Model>.get()    <--- retrieve one record
<Model>.filter() <--- retrieve mutliple records

ListAPIView and generics:
https://www.django-rest-framework.org/api-guide/generic-views/

------------------------------------------------------------------------------
------------------------------------------------------------------------------
Entry.objects.all()[:5]    # first 5 objects
Entry.objects.all()[5:10]  # objects 6 through 10
Entry.objects.all()[:10:2] # first 10, every second object

# These do the same thing, though will throw different exceptions:
Entry.objects.order_by('headline')[0]
Entry.objects.order_by('headline')[0:1].get()

Entry.objects.filter(field='value') # can also send field lookup s to get() and exclude()

# special syntax for joins:
Entry.objects.filter(blog__name='Beatles Blog')
# means, entry.blog points to a blog with a given name

Blog.objects.filter(entry__headline__contains='Lennon')
Blog.objects.filter(entry__authors__name__isnull=True)


