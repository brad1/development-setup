### Best one yet:

Overview:  
Help me write ... in python using the python programming
language.  Each section of this project will use a subset of the python
programming language to be described next.  The scope of this project is
limited to ... so would not include <counterexamples, tests, security, etc>  
The python code should output ... by ... ( Ex. state by  printing to the console)
The python code should input fake data in place of user inputs, be full automated. 

Let us break this assignment up into pieces:

... classes { # Ex. pinball data classes
  # requirements, relationships to other sections 
  # Example, "Use data primimitives here such as `int a = 5;`"
  # Example, "There are consumed by flow of control code"
  # ...
  # After taking the model's questions, backfill answers here for clarity.
  # Stop backfilling when the model begins asking "dumb questions", and proceed with the conversation.
  # ...
  You will brainstorm a list of line items for this section, then ask the user for confirmation.
}

# More sections, # Ex. pinball flow of control code 

// end pieces

  
Before outputting anything, I want you to follow a process and request feedback
between each step.  You must only output one step at a time until you get
feedback from me.  Again, ask me for confirmation at the end of each of the
following steps.

Steps:

1.   { 
   For this first step, it is critical that you output the following subsections:
   subsection a. List any aspects of this assignment that are unclear.
   subsection b.  Out of the above, are there any aspects that would not be
   covered by brainstorming the line items that were previously covered?  If
   so, pick those out and list them here.
}
2.  { You will brainstorm any line items that are needed for a section, then ask me for confirmation. }
3.  { Complete your assignment one piece at a time. }

// end steps


Example::::

Overview:  Help me write a pinball game in python using the python programming language.  Each section of this project will use a subset of the python programming language to be described next.  The scope of this project is limited to simulating the game state, and so would not include aspects such as unit tests, graphics, security, or performance.  The python code should output changes in the game state by simply printing to the console.  This simulation will be fully automated, making use of fake inputs in place of a real user.

Let us break this assignment up into pieces:

pinball data classes {
   Any code that requires data, primitives, or variables.
   This code shall be free of branches, loops, method calls, and mathematical operations.
   I do not have specific classes in mind here, you must brainstorm a list of these and ask me for confirmation at an appropriate time.
}

pinball flow of control code { 
    This code exclusively uses branches, loops, and method calls.
    This code should program against pinball helper module interfaces.
    This code shall be free of any data, python primitives, and mathematical operations.
    I do not have a specific flow in mind for this.  You should design it from scratch, and make it as complete as you possibly can.  If the scope of the code is larger than I want, we will just leave some modules unimplemented.
   You will brainstorm a list of events that may occur here.  Come up with the line items and ask me for confirmation when appropriate.
   Favor the state machine pattern over the event driven pattern.
}

pinball helper modules {
  This code shall consume pinball data classes.
  This code shall be consumed by the flow of control code.
   Math operations and other data manipulation belong here.
  I do not have specific functionalities in mind here.  When appropriate, you will brainstorm a list of items and ask me for confirmation.
}

// end pieces

  
Before outputting anything, I want you to follow a process and request feedback between each step.  You must only output one step at a time until you get feedback from me.  Once more, ask me for confirmation at the end of each following steps.

Steps:

1.   { 
   For this first step, it is critical that you output the following subsections:
   subsection a. List any aspects of this assignment that are unclear.
   subsection b.  Out of the above, are there any aspects that would not be covered by brainstorming the line items that were previously covered?  If so, pick those out and list them here.
}
2.  { You will brainstorm any line items that are needed for a section, then ask me for confirmation. }
3.  { Complete your assignment one piece at a time. }

// end steps
















# goals:
# * enable the model to generate code in reasonably sized context windows
# * make it easy to move this bits of code around without breaking them! 

# Example prompt that worked well for me: ###################################################################

You are an expert in python and selenium. Output format:  python test script that crawls a page with selenium.

coding constraints:
* helper methods should never return a value
* helper methods should never take arguments, instead they should operate on class variables

script requirements:
* browses to base_url
* identifies clickable elements
* clicks the first one
* takes a screenshot in the tmp directory
* edits the screenshot to black out the upper right corner of the image
* takes the md5sum of the edited image
* saves the screenshot in a 'screenshots' dir, using the md5sum as the filename

##################################################################################3

# Example prompt that used "Format" rules instead of high level constraints" ###############


I need help prototyping some code.  Lets use the following rules:
main method:
* calls helper methods (A) only, pass no parameters and take no return values
helper methods (A): [format]
* call helper methods (B)
* print method name
helper methods (B): [format]
* native python code
* print the string 'B'
Solve a problem of your own choosing following these rules


#############################################################################################


# Example prompt from GPT4:  ####################

coding constraints:
* Each segment of code should be self-contained: Define all variables and dependencies within the scope of the code snippet to avoid external dependencies.
* Use clear and descriptive variable names to ensure that each part of the code is understandable and can be easily modified.
* Encapsulate functionality: Design code snippets as functions or methods that can be easily moved and reused. Each should perform a single task or represent a specific functionality.
* Avoid side effects: Functions or methods should not alter global state or have unexpected effects outside their scope.
* Include comments: Provide brief explanations of the purpose and functionality of the code, making it easier to understand and modify.
* Favor readability and simplicity: Write code that is straightforward and easy to follow, avoiding overly complex structures or optimizations that could make the code harder to move or understand.
* Specify input and output: Clearly define what data the code expects and what it returns or outputs, to facilitate integration with other code parts.

##############################################

# Example prompt sections from GPT4: ########################

Objective: Clearly state the purpose and expected outcome of the code. This helps in keeping the focus and ensuring that the generated code meets the intended goals.
Input Specifications: Detail the type, format, and source of inputs the code will handle. This guides the model in understanding what data the code needs to work with.
Output Specifications: Define the expected output, including its format and how it should be returned or stored. This ensures that the generated code produces results in a usable manner.
Error Handling: Describe how the code should deal with unexpected or invalid inputs, exceptions, or any other errors. This improves the robustness and reliability of the code.
Performance Considerations: Outline any requirements related to efficiency, such as time complexity, memory usage, or scalability, especially if performance is a critical aspect.
Security Guidelines: Include any specific security measures or considerations the code must adhere to, such as sanitizing inputs, managing sensitive data, or following best practices to prevent vulnerabilities.
Coding Style and Standards: Specify any particular coding conventions or standards to follow, such as naming conventions, formatting rules, or best practices specific to the language or framework you're using.
Testing Criteria: Provide criteria or scenarios to test the generated code, ensuring it works as intended and meets quality standards.
Documentation Requirements: State the level and type of documentation needed within the code, such as comments explaining complex logic, docstrings for functions, or an overview of how the code fits into a larger project.
Integration Guidelines: Offer instructions or considerations on how the code should integrate with existing codebases, APIs, or systems.

my comments for later testing:
- integration: "make standalone code snippets"
- input/output specs:  this has been effective before
- objectives: good in combination with the above

#########################################################

