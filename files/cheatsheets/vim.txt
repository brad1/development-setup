=== NAVIGATION ===
h - move left
j - move down
k - move up
l - move right
w - move to start of next word
b - move to start of current/previous word
e - move to end of word
0 - move to start of line
^ - move to first non-blank character of line
$ - move to end of line
gg - move to start of file
G - move to end of file
<number>G - move to line number <number>
% - move to matching parenthesis/bracket
H - move to top of screen
M - move to middle of screen
L - move to bottom of screen
CTRL+f - page forward
CTRL+b - page backward
CTRL+u - half page up
CTRL+d - half page down
:marks - list all the marks
'[mark] - jump to the start of the line of mark '[mark]
`[mark] - jump to cursor position of mark '[mark]

=== EDITING ===
i - insert before cursor
I - insert at beginning of line
a - insert after cursor
A - insert at end of line
o - open line below
O - open line above
cw - change word
cc - change line
C - change from cursor to end of line
s - substitute character
S - substitute entire line
x - delete character
X - delete character before cursor
dd - delete line
D - delete to end of line
yy - yank/copy line
yw - yank/copy word
p - paste after cursor
P - paste before cursor
u - undo
CTRL+r - redo
. - repeat last command
r[character] - replace current char with [character]
~ - switch case of character

=== VISUAL MODE ===
v - start visual mode
V - select lines
CTRL+v - select blocks
y - yank/copy selected text
d - delete selected text
c - change selected text
> - shift right
< - shift left

=== SEARCH & REPLACE ===
/[pattern] - search for pattern
?[pattern] - search backward for pattern
n - next match
N - previous match
:%s/[search]/[replace]/g - replace all occurrences
:%s/[search]/[replace]/gc - confirm before replacing

=== WINDOWS & TABS ===
:split or CTRL+s - horizontal split
:vsplit or CTRL+v - vertical split
CTRL+w+h/j/k/l - move to window
CTRL+w+H/J/K/L - move window
CTRL+w+= - equalize window sizes
CTRL+w+w - cycle through windows
:tabnew or :tabn - new tab
gt - go to next tab
gT - go to previous tab
:tabmove [number] - move tab to position [number]

=== FILES & BUFFERS ===
:e [path/file] - open file
:w - save/write
:q - quit
:q! - quit without saving
:wq or :x or ZZ - write and quit
:bn - next buffer
:bp - previous buffer
:bd - delete buffer
:ls - list buffers

=== MISCELLANEOUS ===
:set number - show line numbers
:set nonumber - hide line numbers
:set clipboard=unnamedplus - use system clipboard
:set paste - enable paste mode
:set nopaste - disable paste mode
:vmap <C-c> "+y - map CTRL+c to yank to system clipboard
:vmap <C-v> "+p - map CTRL+v to paste from system clipboard
:help [topic] - open help for topic
gqq # for automatic work wrap!    
:set textwidth=80    
-> then, position cursor, then gq} to wrap paragraph to the right width
* search for word under the cursor    
:set colorcolumn=80 # mark col 80    
:set textwidth=80 # try this    
#  try:    
:!ctags -R    
:tag init    
:tnext"    
:grep "..." **/*.h    
:cnext    
s/^\(.*\)$/'\1',/g # for quoting big lists    



# # # Advanced section # # # #

=== NAVIGATION ===
zt - scroll current line to top of window
zz - scroll current line to middle of window
zb - scroll current line to bottom of window
CTRL+o - jump back to previous location
CTRL+i - jump forward to next location
* - search for word under cursor
# - search backward for word under cursor
g; - move to position of last change in current buffer

=== EDITING ===
gi - go to last insert mode
J - join current line with next
:g/^$/d - delete all empty lines
CTRL+a - increment number under cursor
CTRL+x - decrement number under cursor
gx - open URL under cursor

=== VISUAL MODE ===
U - convert selection to uppercase
u - convert selection to lowercase
:’<,’>s/[search]/[replace]/g - replace within selection

=== FOLDING ===
zf - create fold
zo - open fold
zO - open all nested folds
zc - close fold
zM - close all folds in file
zR - open all folds in file
zd - delete fold at cursor
zE - erase all folds
:’<,’>fold - fold selected lines

=== MACROS ===
q[register] - start recording macro
q - stop recording macro
@[register] - play macro
@@ - replay last macro

=== MARKS & JUMPS ===
m[letter] - set mark at current position
‘[letter] - jump to start of line of mark
`[letter] - jump to exact position of mark
:marks - list all marks
:changes - list change history

=== COMMAND-LINE ===
:![command] - execute shell command
:r![command] - read output of shell command into buffer
CTRL+r [register] - insert content of register in command line

=== SESSIONS ===
:mksession [filename] - save current session
:source [filename] - restore session from file

=== AUTOCOMMANDS ===
:au [event] [pattern] [command] - set an autocommand
:autocmd! - remove all autocommands

=== WINDOWS ===
CTRL+w+s or :sp [file] - split window horizontally
CTRL+w+v or :vsp [file] - split window vertically
CTRL+w+r - rotate windows
CTRL+w+o - close other windows, keep only current

=== PLUGINS (generic) ===
:PlugInstall - commonly used to install plugins (depends on plugin manager)
:PlugUpdate - commonly used to update plugins (depends on plugin manager)

=== MISC ===
:set spell - enable spell checking
:set nospell - disable spell checking
z= - suggest spellings for word under cursor
:checkhealth - check system for potential problems (Neovim)


=== Tricks to try === 
# was vim-news.txt

1. :%!python -m json.tool                    # Format JSON data using Python    
    
2. :g/^$/d                                   # Delete all blank lines    
    
3. :v/pattern/d                              # Delete lines not matching pattern    
    
4. :%s/\v<(\w+)>/\1/g                        # Remove HTML tags, keep content    
    
5. :%s/\(.\)\1\+/\1/g                        # Remove duplicate characters    
    
6. :r !ls                                    # Insert the output of 'ls' command    
    
7. :%!awk '{print $1}'                       # Keep first column of each line    
    
8. :%s/^/    /                               # Indent all lines (add spaces)    
    
9. :%!column -t                              # Align text in columns    
    
10. :g/^.\{,79\}$/d                          # Delete lines with < 80 characters    
    
11. :%!sort -u                               # Sort lines, remove duplicates    
    
12. :%s/\s\+$//e                             # Trim trailing whitespace    
    
13. :%norm A;                                # Append a semicolon to every line    
    
14. :g/./ .!rev                              # Reverse each line using external command    
    
15. :%s/^\(\s*\)\(.*\)/\2\r\1/               # Swap line order with indentation    
    
16. :%s/\(.*\)\n\1/\1/                       # Remove consecutive duplicate lines    
    
17. :vimgrep /pattern/ %                     # Search for 'pattern' in all lines    
    
18. :bufdo %s/pattern/replacement/ge | w     # Replace in all open buffers & save    
    
19. :%!fold -w 80                            # Wrap lines at 80 characters    
    
20. :%s/\v^.{-}(\s*\S+)/\1/                  # Align text right    
    
21. :%s/.*\zs(pattern)/replacement/          # Replace last occurrence in each line    
    
22. :g/pattern/m0                            # Move lines matching 'pattern' to top    
    
23. :%!tac                                   # Reverse line order (using external command)    
    
24. :%s/\(\w\+\)\s\+\1/\1/g                  # Remove repeated words next to each other    
    
25. :%!cut -d',' -f1                         # Keep first column of CSV data    
    
26. :%s/\v"([^"]+)"/\L\1/g                   # Convert text inside quotes to lowercase    
    
27. :g/./exe "normal! mqA\<Esc>`qd"          # Append a character to each line using marks    
    
28. :%s/./&\r/g                              # Split characters into separate lines    
    
29. :%!uniq -c                               # Prefix lines with their frequencies    
    
30. :%s/\(.*\),/\1/                          # Remove last comma from each line


# was vim-old.txt
------------------------------------------------------------------------------
context: my custom stuff

z <-- use to increment debug statements

------------------------------------------------------------------------------
context: folding and marks

m + a-z or A-Z

dma - delete that mark
'a  - jump
`a  - jump
          - yes, you can jump between files
:marks - list marks

easy folds:

zf26<down>
to collapse 26 lines
zd (deletion)
zM collapse all
zR reveal all

try:
set foldmarker
------------------------------------------------------------------------------

Ctrl-R " to paste into the vim commmand line

:66,70s/^/#

use F8 and F9 for recent jumps and files

=-p #reformat inside paragraph

di( #delete inside parens

Ctrl-w-<h|j|k|l> #navigate splits up-down-left-right

Ctrl-(N/P)
- autocomplete from current buffer while inserting
Ctrl-X Ctrl-f
- filepath autocomplete

HML - allign cursor to top,middle,bottom of screen
zz = shift current line to middle of screen
zt =                       top of screen
zb =                       bottom of screen

:x or ZZ save and quit

ctags - Ctrl-]    after /usr/local/Cellar/ctags/5.8_1/bin/ctags -R
        Ctrl-w ] to open target in new window

[Control][b] - Move back one full screen
[Control][f] - Move forward
(use d and u to go 1/2 screen)

:set foldmethod=syntax
zr to zoom in all folds, zR goes all the way
zm to zoom out all folds, zM foes all the way
zo - zoom in at cursor, zO goes all the way
zc zoom out at cursor, zC goes all the way

